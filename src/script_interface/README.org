* Script Interface
** Purpose
The generic script interface should make common tasks like setting and getting parameters from objects easier.
It provides facilities to set parameters on data structures on all nodes, and call methods on all nodes.

** Steps to add a new class for parameter setting.
1. Create file for a new class implementation in src/script_interface/<namespace>/.
2. #include "ScriptInterface.hpp"
3. Create a new class that derives from ScriptInterfaceBase
4. Implement the required functions (get_parameters(), set_parameter(), name(), valid_parameters()).
   - name() should return the full name for the class
   - optionally add implementations for get_parameter() and set_parameters() and call_method()
   - valid_parameters() should return a list of all accepted parameters. ParameterMap is an associative
     array of parameter names and their corresponding description. For a list of supported parameter
     types see src/script_interface/Parameter.hpp. A compact form for this implementation uses curled braces
     initialization as shown in the HelloWorld example and e.g. in Wall.hpp.
   - get_parameters() should return a map of parameters. Again, curled brace init can be used for a short notation.
   - set_parameter() should set the named parameter.

5. Add the new class to the initialization functions
   - if they don't exist add initialize.{hpp, cpp} to src/script_interface/<namespace>/
   - if it does not exist add a function initialize (c.f. src/script_interface/shapes/initialize.{hpp,cpp})
   - include the header for your new class
   - Register the class, use
     - ParallelScriptInterface< <class_name> >::register_new(<name>) if the instances should be created
       on all node, or
     - Utils::Factory<ScriptInterfaceBase>::register_new< <class_name> >(<name>) if instances should only be created on the master.

After these steps the new class is available from python. Instances can be created by script_interface.PScriptInterface(<name>), from
espressomd.script_interface. The python class exposes get_parameters, set_parameters and call_method functions.

** Example class
As a first example we implement a hello world script object, that does not interact with the Espresso core.
This class has one parameter, a single string m_name, and has one callable method: greet.

#+BEGIN_SRC c++
#include "ScriptInterface.hpp"

namespace ScriptInterface {

class HelloWorld : public ScriptInterfaceBase {
public:
  HelloWorld() : m_name("John Doe") {}

  // Returns the name of the class
  const std::string name() const { return "ScriptInterface::HelloWorld"; }

  // All the excepted parameters, in this case only one
  ParameterMap valid_parameters() const override {
    return {{"name", {ParameterType::STRING, true}}};
  }

  // Returns all current values
  Variant get_parameters() const override {
    return {{"name", m_name}};
  }

  // Set the name
  void set_parameter(const std::string &name, const Variant &value) override {
    if(name == "name")
      m_name = boost::get<std::string>(value);
  }

  // This class has only one function, "greet", which does not take parameters.
  Variant call_method(const std::string &name,
                      const VariantMap & /* parameters */) override {
    if (name == "greet") {
      return std::string("Hello, ") + m_name + "!";
    }
  }

private:
  std::string m_name;
};
}
#+END_SRC

If added to the initialization function, this class can be used from python like this

#+BEGIN_SRC python
from espressomd import script_interface

greeter = script_interface.PScriptInterface("ScriptInterface::HelloWorld")

greeter.set_parameters(name='Peter')

print greeter.greet()
#+END_SRC

For a more elaborate example that creates a c++ class have a look at src/script_interface/shapes/Wall.hpp.

** Variant
The implementation uses a specialization of boost::variant to hand over parameters and return values of different types.
It currently supports the type bool, int, double, string, vector<int>, vector<double> and object. The latter means that
this parameter is an other script object.

In c++ the variants can simply assigned a value of any supported type. To get the value back it hast to be fetched via
boost::get<T>(Variant).

Example:
#+BEGIN_SRC c++
   Variant v;

   v = 5; // v hold now an int 
   int i = boost::get<int>(v);
// i == 5

//  std::string s = boost::get<std::string>(v); Raises an exception, v does not hold a string. 
#+END_SRC

To reduce boiler plate there exists a macro SET_PARAMETER_HELPER(NAME, MEMBER) is to be used in the set_parameter implementation.
It gets the value of the variant variable called value and assigns it to MEMBER if name == NAME. Member can also be a reference,
so that the helper can be used with setters.

With the macro the set_parameter function of the example class could read

#+BEGIN_SRC c++
  void set_parameter(const std::string &name, const Variant &value) override {
  SET_PARAMETER_HELPER("name", m_name);
  }
#+END_SRC

** Other objects as parameters
The interface supports handing other objects as parameters to classes.
See src/script_interface/Constraint.hpp for an example.
#TODO: Add actual description...
