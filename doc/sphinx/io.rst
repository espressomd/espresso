.. _Input and Output:

Input and Output
================

.. _No generic checkpointing:

No generic checkpointing
------------------------

One of the most asked-for feature that seems to be missing in is
*checkpointing*, a simple way to tell to store and restore the current
state of the simulation, and to be able to write this state to or read
it from a file. This would be most useful to be able to restart a
simulation from a specific point in time.

Unfortunately, it is impossible to provide a simple command
(``checkpoint``), out of two reasons. The main reason is that has no way
to determine what information constitutes the actual state of the
simulation. On the one hand, scripts sometimes use Tcl-variables that
contain essential information about a simulation, the stored values of
an observable that was computed in previous time steps, counters, etc.
These would have to be contained in a checkpoint. However, not all
Tcl-variables are of interest. For example, Tcl has a number of
automatically set variables that contain information about the hostname,
the machine type, etc. These variables should most probably *not* be
included the simulation state. has no way to distinguish between these
variables. On the other hand, the core has a number of internal
variables, the particle coordinates. While most of these are probably
good candidates for being included into a checkpoint, this is not
necessarily so. For example, when you have particles in your system that
have fixed coordinates, should these be stored in a checkpoint, or not?
If the system contains mostly fixed particles and only very few moving
particles, this would increase the memory size of a checkpoint
needlessly. And what about the interactions in the system, or the bonds?
Should these be stored in a checkpoint, or are they generated by the
script?

Another problem with a generic checkpoint would be the control flow of
the script. In principle, the checkpoint would have to store where in
the script the checkpointing function was called to be able to return
there. All this is even further complicated by the fact that is running
in parallel.

Instead, in |es| the user has to specify what information needs to be saved to a
file to be able to restore the simulation state. When floating point numbers
are stored in text files (the particle positions), there is only a limited
precision. Therefore, it is not possible to bitwise reproduce a simulation
state using this text files. When you need bitwise reproducibility, you will have
to use checkpointing , which stores positions, forces and velocities in binary
format. 

.. _(Almost) generic checkpointing in Python:

(Almost) generic checkpointing in Python
----------------------------------------

Referring to the previous section, generic checkpointing poses
difficulties in many ways. Fortunatelly, the Python checkpointing module
presented in this section provides a comfortable workflow for an almost
generic checkpointing.

The idea is to let the user initially define which data is of interest
for checkpointing and thus solve the above mentioned problem. Once this
is done, checkpoints can then be saved simply by calling one save
function.

The checkpoint data can then later be restored easily by calling one
load function that will automatically process the checkpoint data by
setting the user variables and the checkpointed properties in .

In addition, the checkpointing module is also able to catch signals that
are invoked for example when the simulation is aborted by the user or by
a timeout.

The checkpointing module can be imported with::

    from espressomd import checkpointing

    [ checkpoint_path= ]

Determines the identifier for a checkpoint. Legal characters for an id
are "0-9", "a-zA-Z", "-", "_".

Specifies the relative or absolute path where the checkpoints are
stored.

For example ``checkpoint = checkpointing.Checkpointing(checkpoint_id="mycheckpoint")``
would create the new checkpoint with id "mycheckpoint" and all the
checkpointing data will be stored in the current directory.

After the system and checkpointing user variables are set up they can be
registered for checkpointing.
Name the string of the object or user variable that should be registered for
checkpointing.

To give an example::

    myvar = "some variable value"
    skin = 0.4
    checkpoint.register("myvar")
    checkpoint.register("skin")

    system = espressomd.System()
    # ... set system properties like box_l or
    timestep here ... checkpoint.register("system")

    system.thermostat.set_langevin(kT=1.0, gamma=1.0)
    checkpoint.register("system.thermostat")

    # ... set system.non_bonded_inter here ...
    checkpoint.register("system.non_bonded_inter")

    # ... add particles to the system with system.part.add(...) here ...
    checkpoint.register("system.part")

    # ... set charges of particles here ... from espressomd import
    electrostatics p3m = electrostatics.P3M(prefactor=1.0, accuracy=1e-2)
    system.actors.add(p3m)
    checkpoint.register("p3m")

will register the user variables ``skin`` and ``myvar``, system properties, a
Langevin thermostat, non-bonded interactions, particle properties and a p3m
object for checkpointing. It is important to note that the checkpointing of
|es| will only save basic system properties. This excludes for example the
system thermostat or the particle data. For this reason one has to explicitly
register and for checkpointing.

Analogous to this, objects that have been registered for checkpointing but are
no longer needed in the next checkpoints can be unregistered with ``checkpoint
unregister var``.  A list of all registered object names can be generated with
``checkpoint get_registered_objects``.  A new checkpoint with a consecutive
index that contains the latest data of the registered objects can then be
created by calling ``checkpoint save [checkpoint_index]``.

An existing checkpoint can be loaded with ``checkpoint load
[checkpoint_index]``.

If no is passed the last checkpoint will be loaded. Concerning the procedure of
registering objects for checkpointing it is good to know that all registered
objects saved in a checkpoint will be automatically re-registered after loading
this checkpoint.

In practical implementations it might come in handy to check if there are any
available checkpoints for a given checkpoint id. This can be done with
``checkpoint has_checkpoints`` which returns a bool value.

As mentioned in the introduction, the checkpointing module also enables
to catch signals in order to save a checkpoint and quit the simulation.
Therefore one has to register the signal which should be caught with
``checkpoint register_signal signum=int_number``.

The registered signals are associated with the checkpoint id and will be automatically
re-registered when the same checkpoint id is used later.

Following the example above, the next example loads the last checkpoint,
restores the state of all checkpointed objects and registers a signal.

.. code::

    import espressomd from espressomd import checkpointing import signal

    checkpoint = checkpointing.Checkpointing(checkpoint_id="mycheckpoint")
    checkpoint.load()

    system = espressomd.System()
    system.cell_system.skin = skin
    system.actors.add(p3m)

    #signal.SIGINT: signal 2, is sent when ctrl+c is pressed
    checkpoint.register\_signal(signal.SIGINT)

    # integrate system until user presses ctrl+c while True:
    system.integrator.run(1000)

The above example runs as long as the user interrupts by pressing
ctrl+c. In this case a new checkpoint is written and the simulation
quits.

It is perhaps surprising that one has to explicitly create ``system`` again.
But this is necessary as not all |es| modules like ``cell_system`` or
``actors`` have implementations for checkpointing yet. By calling ``System()`` these modules
are created and can be easily initialized with checkpointed user variables
(like ``skin``) or checkpointed submodules (like ``p3m``).

.. _Writing H5MD-Files:

Writing H5MD-files
------------------

For large amounts of data itâ€™s a good idea to store it in the hdf5 (H5MD
is based on hdf5) file format (see https://www.hdfgroup.org/ for
details). Currently |es| supports some basic functions for writing simulation
data to H5MD files. The implementation is MPI-parallelized and is capable
of dealing with varying numbers of particles.

To write data in a hdf5-file according to the H5MD proposal (see
http://nongnu.org/h5md/), first an object of the class
:class:`espressomd.io.writer.h5md.H5md` has to be created and linked to the
respective hdf5-file. This may, for example, look like:

.. code:: python

    from espressomd.io.writer import h5md
    system = espressomd.System()
    # ... add particles here
    h5 = h5md.H5md(filename="trajectory.h5", write_pos=True, write_vel=True)

If a file with the given filename exists and has a valid H5MD structures
it will be backed up to a file with suffix ".bak". This file will be
removed by the close() method of the class which has to be called at the
end of the simulation to close the file. The current implementation
allows to write the following properties: positions, velocities, forces,
species (|es| types), and masses of the particles. In order to write any property, you
have to set the respective boolean flag as an option to the H5md class.
Currently available:

    - write_pos: particle positions

    - write_vel: particle velocities

    - write_force: particle forces

    - write_species: particle types

    - write_mass: particle masses

    - write_ordered: if particles should be written ordered according to their
      id (implies serial write). 



In simulations with varying numbers of particles (MC or reactions), the
size of the dataset will be adapted if the maximum number of particles
increases but will not be decreased. Instead a negative fill value will
be written to the trajectory for the id. If you have a parallel
simulation please keep in mind that the sequence of particles in general
changes from timestep to timestep. Therefore you have to always use the
dataset for the ids to track which position/velocity/force/type/mass
entry belongs to which particle. To write data to the hdf5 file, simply
call the H5md objects write method without any arguments.

h5.write()

After the last write call, you have to call the close() method to remove
the backup file and to close the datasets etc.

.. _Writing VTF files:

Writing VTF files
-----------------

The formats VTF (**V**\ TF **T**\ rajectory **F**\ ormat), VSF
(**V**\ TF **S**\ tructure **F**\ ormat) and VCF (**V**\ TF
**C**\ oordinate **F**\ ormat) are formats for the visualization
software VMD:raw-latex:`\cite{humphrey96a}`. They are intended to
be human-readable and easy to produce automatically and modify.

The format distinguishes between *structure blocks* that contain the
topological information of the system (the system size, particle names,
types, radii and bonding information, amongst others), while *coordinate
blocks* (a.k.a. as *timestep blocks*) contain the coordinates for the
particles at a single timestep. For a visualization with VMD, one
structure block and at least one coordinate block is required.

Files in the VSF format contain a single structure block, files in the
VCF format contain at least one coordinate block, while files in the VTF
format contain a single structure block first and an arbitrary number of
coordinate blocks afterwards, thus allowing to store all information for
a whole simulation in a single file. For more details on the format,
refer to the homepage of the format .

Creating files in these formats from within is supported by the commands
and , that write a structure respectively a coordinate block to the
given Tcl channel. To create a VTF file, first use at the beginning of
the simulation, and then ``writevcf`` after each timestep to generate a
trajectory of the whole simulation.

The structure definitions in the VTF/VSF formats are incremental, a user
can easily add further structure lines to the VTF/VSF file after a
structure block has been written to specify further particle properties
for visualization.

Note that the ids of the particles in and VMD may differ. VMD requires
the particle ids to be enumerated continuously without any holes, while
this is not required in . When using and , the particle ids are
automatically translated into VMD particle ids. The function allows the
user to get the VMD particle id for a given particle id.

Also note, that these formats can not be used to write trajectories
where the number of particles or their types varies between the
timesteps. This is a restriction of VMD itself, not of the format.

.. _writevsf\: Writing the topology:

``writevsf``: Writing the topology
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

writevsf(fp,types)


Writes a structure block describing the systemâ€™s structure to the
channel given by `fp`. `fp` must be an identifier for an open channel such as the
return value of an invocation of `open`. The output of this command can be
used for a standalone VSF file, or at the beginning of a VTF file that
contains a trajectory of a whole simulation.


Specify the coordinates of which particles should be written. If `types` is
used, all coordinates will be written (in the ordered timestep format).
Otherwise, has to be a Tcl-list specifying the pids of the particles.
The default is `types="all"`. 
Example
`pids =[0, 23, 42]`
`pids="all"`

.. _writevcf\: Writing the coordinates:

``writevcf``: Writing the coordinates
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

``writevcf(fp, types)``

Writes a coordinate (or timestep) block that contains all coordinates of
the systemâ€™s particles to the channel given by ``fp``. ``fp`` must be an identifier
for an open channel such as the return value of an invocation of ``open``.

.. todo:: NOT IMPLEMENTED

Specify, whether the output is in a human-readable, but somewhat longer
format (), or in a more compact form (). The default is .

.. todo:: NOT IMPLEMENTED

Specify whether the particle positions are written in absolute
coordinates () or folded into the central image of a periodic system ().
The default is .

Specify the coordinates of which particles should be written. If ``types`` is
used, all coordinates will be written (in the ordered timestep format).
Otherwise, has to be a Tcl-list specifying the pids of the particles.
The default is ``types="all"``. 
Example::

    pids =[0, 23, 42]
    pids="all"

.. todo:: NOT IMPLEMENTED

Specify arbitrary user data for the particles. has to be a Tcl list
containing the user data for every particle. The user data is appended
to the coordinate line and can be read into VMD via the VMD plugin
``VTFTools``. The default is to provide no userdata.
``userdata {"red" "blue" "green"}``

.. _vtfpid\: Translating particles ids to VMD particle ids:

``vtfpid``: Translating particles ids to VMD particle ids
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

vtfpid

.. todo:: NOT IMPLEMENTED

If is the id of a particle as used in , this command returns the atom id
used in the VTF, VSF or VCF formats.

.. _Writing various formats using MDAnalysis:

Writing various formats using MDAnalysis
----------------------------------------

If the MDAnalysis package (http://mdanalysis.org) is installed, it
is possible to use it to convert frames to any of the supported
configuration/trajectory formats, including PDB, GROMACS, GROMOS,
CHARMM/NAMD, AMBER, LAMMPS, ...)

To use MDAnalysis to write in any of these formats, one has first to prepare a stream from
the |es| particle data using the class :class:`espressomd.MDA_ESP`, and then read from it
using MDAnalysis. A simple example is the following:

.. code:: python

    import espressomd
    import MDAnalysis as mda
    from espressomd import MDA_ESP
    system = espressomd.System()
    # ... add particles here
    eos = MDA_ESP.Stream(system) # create the stream
    u =  mda.Universe( eos.topology, eos.trajectory ) # create the MDA universe

    # example: write a single frame to PDB
    u.atoms.write("system.pdb")

    # example: save the trajectory to GROMACS format
    from MDAnalysis.coordinates.TRR import TRRWriter
    W = TRRWriter("traj.trr",n_atoms=len(system.part)) # open the trajectory file
    for i in range(100):
        system.integrator.run(1)
        u.load_new(eos.trajectory) # load the frame to the MDA universe
        W.write_next_timestep(u.trajectory.ts) # append it to the trajectory

For other examples see samples/python/MDAnalysisIntegration.py

.. _Parsing PDB Files:

Parsing PDB Files
-----------------

The feature allows the user to parse simple PDB files, a file format introduced by the protein database to encode molecular structures. Together with a topology file (here ) the structure gets interpolated to the grid. For the input you will need to prepare a PDB file with a force field to generate the topology file. Normally the PDB file extension is , the topology file extension is . Obviously the PDB file is placed instead of and the topology file instead of .

